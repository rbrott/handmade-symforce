// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <math.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * Reprojection residual for the camera model used in the Bundle-Adjustment-in-the-Large dataset, a
 * polynomial camera with two distortion coefficients, cx == cy == 0, and fx == fy
 *
 * See https://grail.cs.washington.edu/projects/bal/ for more information
 *
 * Args:
 *     cam_T_world: The (inverse) pose of the camera
 *     intrinsics: Camera intrinsics (f, k1, k2)
 *     point: The world point to be projected
 *     pixel: The measured pixel in the camera (with (0, 0) == center of image)
 *
 * Returns:
 *     residual: The reprojection residual
 *     jacobian: (2x12) jacobian of res wrt args cam_T_world (6), intrinsics (3), point (3)
 *     hessian: (12x12) Gauss-Newton hessian for args cam_T_world (6), intrinsics (3), point (3)
 *     rhs: (12x1) Gauss-Newton rhs for args cam_T_world (6), intrinsics (3), point (3)
 */
void snavely_reprojection_factor(double* cam_T_world_storage, double* intrinsics_storage,
                                 double* point_storage, double* pixel_storage,
                                 double epsilon,            // 2 x 1 matrix, nullable
                                 double* res_storage,       // 2 x 12 matrix, nullable
                                 double* jacobian_storage,  // 12 x 12 matrix, nullable
                                 double* hessian_storage,   // 12 x 1 matrix, nullable
                                 double* rhs_storage) {
  // Total ops: 575

  // Intermediate terms (133)
  double _tmp0 = 2 * cam_T_world_storage[2];
  double _tmp1 = _tmp0 * cam_T_world_storage[3];
  double _tmp2 = -_tmp1;
  double _tmp3 = 2 * cam_T_world_storage[0] * cam_T_world_storage[1];
  double _tmp4 = _tmp2 + _tmp3;
  double _tmp5 = pow(cam_T_world_storage[2], 2);
  double _tmp6 = -2 * _tmp5;
  double _tmp7 = pow(cam_T_world_storage[1], 2);
  double _tmp8 = 1 - 2 * _tmp7;
  double _tmp9 = _tmp6 + _tmp8;
  double _tmp10 = _tmp0 * cam_T_world_storage[0];
  double _tmp11 = 2 * cam_T_world_storage[3];
  double _tmp12 = _tmp11 * cam_T_world_storage[1];
  double _tmp13 = _tmp10 + _tmp12;
  double _tmp14 = _tmp13 * point_storage[2] + _tmp4 * point_storage[1] + _tmp9 * point_storage[0] +
                  cam_T_world_storage[4];
  double _tmp15 = pow(cam_T_world_storage[0], 2);
  double _tmp16 = -2 * _tmp15;
  double _tmp17 = _tmp16 + _tmp8;
  double _tmp18 = -_tmp12;
  double _tmp19 = _tmp10 + _tmp18;
  double _tmp20 = _tmp0 * cam_T_world_storage[1];
  double _tmp21 = _tmp11 * cam_T_world_storage[0];
  double _tmp22 = _tmp20 + _tmp21;
  double _tmp23 = -_tmp17 * point_storage[2] - _tmp19 * point_storage[0] -
                  _tmp22 * point_storage[1] - cam_T_world_storage[6];
  double _tmp24 = fmax(_tmp23, epsilon);
  double _tmp25 = pow(_tmp24, -2);
  double _tmp26 = _tmp1 + _tmp3;
  double _tmp27 = _tmp16 + _tmp6 + 1;
  double _tmp28 = -_tmp21;
  double _tmp29 = _tmp20 + _tmp28;
  double _tmp30 = _tmp26 * point_storage[0] + _tmp27 * point_storage[1] +
                  _tmp29 * point_storage[2] + cam_T_world_storage[5];
  double _tmp31 = pow(_tmp30, 2);
  double _tmp32 = _tmp25 * _tmp31;
  double _tmp33 = pow(_tmp14, 2);
  double _tmp34 = _tmp25 * _tmp33;
  double _tmp35 = _tmp32 + _tmp34;
  double _tmp36 = pow(_tmp35, 2);
  double _tmp37 = _tmp35 * intrinsics_storage[1] + _tmp36 * intrinsics_storage[2] + 1;
  double _tmp38 = 1.0 / _tmp24;
  double _tmp39 = _tmp37 * _tmp38;
  double _tmp40 = _tmp39 * intrinsics_storage[0];
  double _tmp41 = _tmp14 * _tmp40 - pixel_storage[0];
  double _tmp42 = _tmp30 * _tmp40 - pixel_storage[1];
  double _tmp43 = -_tmp15;
  double _tmp44 = _tmp43 + _tmp5;
  double _tmp45 = pow(cam_T_world_storage[3], 2);
  double _tmp46 = -_tmp7;
  double _tmp47 = _tmp45 + _tmp46;
  double _tmp48 = -_tmp20;
  double _tmp49 = point_storage[1] * (_tmp44 + _tmp47) + point_storage[2] * (_tmp28 + _tmp48);
  double _tmp50 = (((_tmp23 - epsilon) > 0) - ((_tmp23 - epsilon) < 0)) + 1;
  double _tmp51 = _tmp50 / pow(_tmp24, 3);
  double _tmp52 = _tmp33 * _tmp51;
  double _tmp53 = _tmp31 * _tmp51;
  double _tmp54 = -_tmp3;
  double _tmp55 = _tmp13 * point_storage[1] + point_storage[2] * (_tmp1 + _tmp54);
  double _tmp56 = 2 * _tmp25;
  double _tmp57 = _tmp14 * _tmp56;
  double _tmp58 = -_tmp45;
  double _tmp59 = _tmp29 * point_storage[1] + point_storage[2] * (_tmp15 + _tmp46 + _tmp5 + _tmp58);
  double _tmp60 = _tmp30 * _tmp56;
  double _tmp61 = _tmp49 * _tmp52 + _tmp49 * _tmp53 + _tmp55 * _tmp57 + _tmp59 * _tmp60;
  double _tmp62 = _tmp35 * intrinsics_storage[2];
  double _tmp63 = 2 * _tmp62;
  double _tmp64 = _tmp61 * _tmp63 + _tmp61 * intrinsics_storage[1];
  double _tmp65 = _tmp38 * intrinsics_storage[0];
  double _tmp66 = _tmp14 * _tmp65;
  double _tmp67 = _tmp14 * _tmp25;
  double _tmp68 = _tmp37 * intrinsics_storage[0];
  double _tmp69 = (1.0 / 2.0) * _tmp50 * _tmp68;
  double _tmp70 = _tmp67 * _tmp69;
  double _tmp71 = _tmp40 * _tmp55 + _tmp49 * _tmp70 + _tmp64 * _tmp66;
  double _tmp72 = _tmp30 * _tmp65;
  double _tmp73 = _tmp25 * _tmp30;
  double _tmp74 = _tmp69 * _tmp73;
  double _tmp75 = _tmp40 * _tmp59 + _tmp49 * _tmp74 + _tmp64 * _tmp72;
  double _tmp76 = _tmp58 + _tmp7;
  double _tmp77 = -_tmp5;
  double _tmp78 = _tmp15 + _tmp77;
  double _tmp79 = _tmp19 * point_storage[2] + point_storage[0] * (_tmp76 + _tmp78);
  double _tmp80 = -_tmp10;
  double _tmp81 = point_storage[0] * (_tmp18 + _tmp80) + point_storage[2] * (_tmp47 + _tmp78);
  double _tmp82 = _tmp26 * point_storage[2] + point_storage[0] * (_tmp21 + _tmp48);
  double _tmp83 = _tmp52 * _tmp79 + _tmp53 * _tmp79 + _tmp57 * _tmp81 + _tmp60 * _tmp82;
  double _tmp84 = _tmp63 * _tmp83 + _tmp83 * intrinsics_storage[1];
  double _tmp85 = _tmp40 * _tmp81 + _tmp66 * _tmp84 + _tmp70 * _tmp79;
  double _tmp86 = _tmp40 * _tmp82 + _tmp72 * _tmp84 + _tmp74 * _tmp79;
  double _tmp87 = _tmp4 * point_storage[0] + point_storage[1] * (_tmp44 + _tmp76);
  double _tmp88 = _tmp22 * point_storage[0] + point_storage[1] * (_tmp12 + _tmp80);
  double _tmp89 =
      point_storage[0] * (_tmp43 + _tmp45 + _tmp7 + _tmp77) + point_storage[1] * (_tmp2 + _tmp54);
  double _tmp90 = _tmp52 * _tmp88 + _tmp53 * _tmp88 + _tmp57 * _tmp87 + _tmp60 * _tmp89;
  double _tmp91 = _tmp63 * _tmp90 + _tmp90 * intrinsics_storage[1];
  double _tmp92 = _tmp40 * _tmp87 + _tmp66 * _tmp91 + _tmp70 * _tmp88;
  double _tmp93 = _tmp40 * _tmp89 + _tmp72 * _tmp91 + _tmp74 * _tmp88;
  double _tmp94 = 4 * _tmp62;
  double _tmp95 = _tmp57 * intrinsics_storage[1] + _tmp67 * _tmp94;
  double _tmp96 = _tmp40 + _tmp66 * _tmp95;
  double _tmp97 = _tmp72 * _tmp95;
  double _tmp98 = _tmp60 * intrinsics_storage[1] + _tmp73 * _tmp94;
  double _tmp99 = _tmp66 * _tmp98;
  double _tmp100 = _tmp40 + _tmp72 * _tmp98;
  double _tmp101 = _tmp52 + _tmp53;
  double _tmp102 = _tmp101 * _tmp63 + _tmp101 * intrinsics_storage[1];
  double _tmp103 = _tmp102 * _tmp66 + _tmp70;
  double _tmp104 = _tmp102 * _tmp72 + _tmp74;
  double _tmp105 = _tmp14 * _tmp39;
  double _tmp106 = _tmp30 * _tmp39;
  double _tmp107 = _tmp35 * _tmp66;
  double _tmp108 = _tmp35 * _tmp72;
  double _tmp109 = _tmp36 * _tmp66;
  double _tmp110 = _tmp36 * _tmp72;
  double _tmp111 = _tmp19 * _tmp52 + _tmp19 * _tmp53 + _tmp26 * _tmp60 + _tmp57 * _tmp9;
  double _tmp112 = _tmp111 * _tmp63 + _tmp111 * intrinsics_storage[1];
  double _tmp113 = _tmp112 * _tmp66 + _tmp19 * _tmp70 + _tmp40 * _tmp9;
  double _tmp114 = _tmp112 * _tmp72 + _tmp19 * _tmp74 + _tmp26 * _tmp40;
  double _tmp115 = _tmp22 * _tmp52 + _tmp22 * _tmp53 + _tmp27 * _tmp60 + _tmp4 * _tmp57;
  double _tmp116 = _tmp115 * _tmp63 + _tmp115 * intrinsics_storage[1];
  double _tmp117 = _tmp116 * _tmp66 + _tmp22 * _tmp70 + _tmp4 * _tmp40;
  double _tmp118 = _tmp116 * _tmp72 + _tmp22 * _tmp74 + _tmp27 * _tmp40;
  double _tmp119 = _tmp13 * _tmp57 + _tmp17 * _tmp52 + _tmp17 * _tmp53 + _tmp29 * _tmp60;
  double _tmp120 = _tmp119 * _tmp63 + _tmp119 * intrinsics_storage[1];
  double _tmp121 = _tmp120 * _tmp66 + _tmp13 * _tmp40 + _tmp17 * _tmp70;
  double _tmp122 = _tmp120 * _tmp72 + _tmp17 * _tmp74 + _tmp29 * _tmp40;
  double _tmp123 = pow(intrinsics_storage[0], 2);
  double _tmp124 = _tmp123 * _tmp32;
  double _tmp125 = _tmp32 * _tmp68;
  double _tmp126 = _tmp124 * _tmp36;
  double _tmp127 = _tmp123 * _tmp34;
  double _tmp128 = _tmp34 * _tmp68;
  double _tmp129 = _tmp127 * _tmp36;
  double _tmp130 = pow(_tmp37, 2);
  double _tmp131 = pow(_tmp35, 3);
  double _tmp132 = pow(_tmp35, 4);

  // Output terms (4)
  if (res_storage != 0) {
    res_storage[0] = _tmp41;
    res_storage[1] = _tmp42;
  }

  if (jacobian_storage != 0) {
    jacobian_storage[0] = _tmp71;
    jacobian_storage[1] = _tmp75;
    jacobian_storage[12] = _tmp85;
    jacobian_storage[13] = _tmp86;
    jacobian_storage[24] = _tmp92;
    jacobian_storage[25] = _tmp93;
    jacobian_storage[36] = _tmp96;
    jacobian_storage[37] = _tmp97;
    jacobian_storage[48] = _tmp99;
    jacobian_storage[49] = _tmp100;
    jacobian_storage[60] = _tmp103;
    jacobian_storage[61] = _tmp104;
    jacobian_storage[72] = _tmp105;
    jacobian_storage[73] = _tmp106;
    jacobian_storage[84] = _tmp107;
    jacobian_storage[85] = _tmp108;
    jacobian_storage[96] = _tmp109;
    jacobian_storage[97] = _tmp110;
    jacobian_storage[108] = _tmp113;
    jacobian_storage[109] = _tmp114;
    jacobian_storage[120] = _tmp117;
    jacobian_storage[121] = _tmp118;
    jacobian_storage[132] = _tmp121;
    jacobian_storage[133] = _tmp122;
  }

  if (hessian_storage != 0) {
    hessian_storage[0] = pow(_tmp71, 2) + pow(_tmp75, 2);
    hessian_storage[1] = _tmp71 * _tmp85 + _tmp75 * _tmp86;
    hessian_storage[2] = _tmp71 * _tmp92 + _tmp75 * _tmp93;
    hessian_storage[3] = _tmp71 * _tmp96 + _tmp75 * _tmp97;
    hessian_storage[4] = _tmp100 * _tmp75 + _tmp71 * _tmp99;
    hessian_storage[5] = _tmp103 * _tmp71 + _tmp104 * _tmp75;
    hessian_storage[6] = _tmp105 * _tmp71 + _tmp106 * _tmp75;
    hessian_storage[7] = _tmp107 * _tmp71 + _tmp108 * _tmp75;
    hessian_storage[8] = _tmp109 * _tmp71 + _tmp110 * _tmp75;
    hessian_storage[9] = _tmp113 * _tmp71 + _tmp114 * _tmp75;
    hessian_storage[10] = _tmp117 * _tmp71 + _tmp118 * _tmp75;
    hessian_storage[11] = _tmp121 * _tmp71 + _tmp122 * _tmp75;
    hessian_storage[12] = 0;
    hessian_storage[13] = pow(_tmp85, 2) + pow(_tmp86, 2);
    hessian_storage[14] = _tmp85 * _tmp92 + _tmp86 * _tmp93;
    hessian_storage[15] = _tmp85 * _tmp96 + _tmp86 * _tmp97;
    hessian_storage[16] = _tmp100 * _tmp86 + _tmp85 * _tmp99;
    hessian_storage[17] = _tmp103 * _tmp85 + _tmp104 * _tmp86;
    hessian_storage[18] = _tmp105 * _tmp85 + _tmp106 * _tmp86;
    hessian_storage[19] = _tmp107 * _tmp85 + _tmp108 * _tmp86;
    hessian_storage[20] = _tmp109 * _tmp85 + _tmp110 * _tmp86;
    hessian_storage[21] = _tmp113 * _tmp85 + _tmp114 * _tmp86;
    hessian_storage[22] = _tmp117 * _tmp85 + _tmp118 * _tmp86;
    hessian_storage[23] = _tmp121 * _tmp85 + _tmp122 * _tmp86;
    hessian_storage[24] = 0;
    hessian_storage[25] = 0;
    hessian_storage[26] = pow(_tmp92, 2) + pow(_tmp93, 2);
    hessian_storage[27] = _tmp92 * _tmp96 + _tmp93 * _tmp97;
    hessian_storage[28] = _tmp100 * _tmp93 + _tmp92 * _tmp99;
    hessian_storage[29] = _tmp103 * _tmp92 + _tmp104 * _tmp93;
    hessian_storage[30] = _tmp105 * _tmp92 + _tmp106 * _tmp93;
    hessian_storage[31] = _tmp107 * _tmp92 + _tmp108 * _tmp93;
    hessian_storage[32] = _tmp109 * _tmp92 + _tmp110 * _tmp93;
    hessian_storage[33] = _tmp113 * _tmp92 + _tmp114 * _tmp93;
    hessian_storage[34] = _tmp117 * _tmp92 + _tmp118 * _tmp93;
    hessian_storage[35] = _tmp121 * _tmp92 + _tmp122 * _tmp93;
    hessian_storage[36] = 0;
    hessian_storage[37] = 0;
    hessian_storage[38] = 0;
    hessian_storage[39] = _tmp124 * pow(_tmp95, 2) + pow(_tmp96, 2);
    hessian_storage[40] = _tmp100 * _tmp97 + _tmp96 * _tmp99;
    hessian_storage[41] = _tmp103 * _tmp96 + _tmp104 * _tmp97;
    hessian_storage[42] = _tmp105 * _tmp96 + _tmp125 * _tmp95;
    hessian_storage[43] = _tmp107 * _tmp96 + _tmp124 * _tmp35 * _tmp95;
    hessian_storage[44] = _tmp109 * _tmp96 + _tmp126 * _tmp95;
    hessian_storage[45] = _tmp113 * _tmp96 + _tmp114 * _tmp97;
    hessian_storage[46] = _tmp117 * _tmp96 + _tmp118 * _tmp97;
    hessian_storage[47] = _tmp121 * _tmp96 + _tmp122 * _tmp97;
    hessian_storage[48] = 0;
    hessian_storage[49] = 0;
    hessian_storage[50] = 0;
    hessian_storage[51] = 0;
    hessian_storage[52] = pow(_tmp100, 2) + _tmp127 * pow(_tmp98, 2);
    hessian_storage[53] = _tmp100 * _tmp104 + _tmp103 * _tmp99;
    hessian_storage[54] = _tmp100 * _tmp106 + _tmp128 * _tmp98;
    hessian_storage[55] = _tmp100 * _tmp108 + _tmp127 * _tmp35 * _tmp98;
    hessian_storage[56] = _tmp100 * _tmp110 + _tmp129 * _tmp98;
    hessian_storage[57] = _tmp100 * _tmp114 + _tmp113 * _tmp99;
    hessian_storage[58] = _tmp100 * _tmp118 + _tmp117 * _tmp99;
    hessian_storage[59] = _tmp100 * _tmp122 + _tmp121 * _tmp99;
    hessian_storage[60] = 0;
    hessian_storage[61] = 0;
    hessian_storage[62] = 0;
    hessian_storage[63] = 0;
    hessian_storage[64] = 0;
    hessian_storage[65] = pow(_tmp103, 2) + pow(_tmp104, 2);
    hessian_storage[66] = _tmp103 * _tmp105 + _tmp104 * _tmp106;
    hessian_storage[67] = _tmp103 * _tmp107 + _tmp104 * _tmp108;
    hessian_storage[68] = _tmp103 * _tmp109 + _tmp104 * _tmp110;
    hessian_storage[69] = _tmp103 * _tmp113 + _tmp104 * _tmp114;
    hessian_storage[70] = _tmp103 * _tmp117 + _tmp104 * _tmp118;
    hessian_storage[71] = _tmp103 * _tmp121 + _tmp104 * _tmp122;
    hessian_storage[72] = 0;
    hessian_storage[73] = 0;
    hessian_storage[74] = 0;
    hessian_storage[75] = 0;
    hessian_storage[76] = 0;
    hessian_storage[77] = 0;
    hessian_storage[78] = _tmp130 * _tmp32 + _tmp130 * _tmp34;
    hessian_storage[79] = _tmp125 * _tmp35 + _tmp128 * _tmp35;
    hessian_storage[80] = _tmp125 * _tmp36 + _tmp128 * _tmp36;
    hessian_storage[81] = _tmp105 * _tmp113 + _tmp106 * _tmp114;
    hessian_storage[82] = _tmp105 * _tmp117 + _tmp106 * _tmp118;
    hessian_storage[83] = _tmp105 * _tmp121 + _tmp106 * _tmp122;
    hessian_storage[84] = 0;
    hessian_storage[85] = 0;
    hessian_storage[86] = 0;
    hessian_storage[87] = 0;
    hessian_storage[88] = 0;
    hessian_storage[89] = 0;
    hessian_storage[90] = 0;
    hessian_storage[91] = _tmp126 + _tmp129;
    hessian_storage[92] = _tmp124 * _tmp131 + _tmp127 * _tmp131;
    hessian_storage[93] = _tmp107 * _tmp113 + _tmp108 * _tmp114;
    hessian_storage[94] = _tmp107 * _tmp117 + _tmp108 * _tmp118;
    hessian_storage[95] = _tmp107 * _tmp121 + _tmp108 * _tmp122;
    hessian_storage[96] = 0;
    hessian_storage[97] = 0;
    hessian_storage[98] = 0;
    hessian_storage[99] = 0;
    hessian_storage[100] = 0;
    hessian_storage[101] = 0;
    hessian_storage[102] = 0;
    hessian_storage[103] = 0;
    hessian_storage[104] = _tmp124 * _tmp132 + _tmp127 * _tmp132;
    hessian_storage[105] = _tmp109 * _tmp113 + _tmp110 * _tmp114;
    hessian_storage[106] = _tmp109 * _tmp117 + _tmp110 * _tmp118;
    hessian_storage[107] = _tmp109 * _tmp121 + _tmp110 * _tmp122;
    hessian_storage[108] = 0;
    hessian_storage[109] = 0;
    hessian_storage[110] = 0;
    hessian_storage[111] = 0;
    hessian_storage[112] = 0;
    hessian_storage[113] = 0;
    hessian_storage[114] = 0;
    hessian_storage[115] = 0;
    hessian_storage[116] = 0;
    hessian_storage[117] = pow(_tmp113, 2) + pow(_tmp114, 2);
    hessian_storage[118] = _tmp113 * _tmp117 + _tmp114 * _tmp118;
    hessian_storage[119] = _tmp113 * _tmp121 + _tmp114 * _tmp122;
    hessian_storage[120] = 0;
    hessian_storage[121] = 0;
    hessian_storage[122] = 0;
    hessian_storage[123] = 0;
    hessian_storage[124] = 0;
    hessian_storage[125] = 0;
    hessian_storage[126] = 0;
    hessian_storage[127] = 0;
    hessian_storage[128] = 0;
    hessian_storage[129] = 0;
    hessian_storage[130] = pow(_tmp117, 2) + pow(_tmp118, 2);
    hessian_storage[131] = _tmp117 * _tmp121 + _tmp118 * _tmp122;
    hessian_storage[132] = 0;
    hessian_storage[133] = 0;
    hessian_storage[134] = 0;
    hessian_storage[135] = 0;
    hessian_storage[136] = 0;
    hessian_storage[137] = 0;
    hessian_storage[138] = 0;
    hessian_storage[139] = 0;
    hessian_storage[140] = 0;
    hessian_storage[141] = 0;
    hessian_storage[142] = 0;
    hessian_storage[143] = pow(_tmp121, 2) + pow(_tmp122, 2);
  }

  if (rhs_storage != 0) {
    rhs_storage[0] = _tmp41 * _tmp71 + _tmp42 * _tmp75;
    rhs_storage[1] = _tmp41 * _tmp85 + _tmp42 * _tmp86;
    rhs_storage[2] = _tmp41 * _tmp92 + _tmp42 * _tmp93;
    rhs_storage[3] = _tmp41 * _tmp96 + _tmp42 * _tmp97;
    rhs_storage[4] = _tmp100 * _tmp42 + _tmp41 * _tmp99;
    rhs_storage[5] = _tmp103 * _tmp41 + _tmp104 * _tmp42;
    rhs_storage[6] = _tmp105 * _tmp41 + _tmp106 * _tmp42;
    rhs_storage[7] = _tmp107 * _tmp41 + _tmp108 * _tmp42;
    rhs_storage[8] = _tmp109 * _tmp41 + _tmp110 * _tmp42;
    rhs_storage[9] = _tmp113 * _tmp41 + _tmp114 * _tmp42;
    rhs_storage[10] = _tmp117 * _tmp41 + _tmp118 * _tmp42;
    rhs_storage[11] = _tmp121 * _tmp41 + _tmp122 * _tmp42;
  }
}  // NOLINT(readability/fn_size)

#ifdef __cplusplus
}
#endif
