/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 *
 * From Source File: /Users/ryan/dev/symforce-zig-build/lcmtypes/symforce.lcm
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __sym_optimization_iteration_t_hpp__
#define __sym_optimization_iteration_t_hpp__

#include <ostream>
#include "lcmtypes/eigen_lcm/MatrixXf.hpp"
#include "lcmtypes/eigen_lcm/VectorXf.hpp"
#include "lcmtypes/sym/values_t.hpp"

namespace sym
{

/// Debug stats for a single iteration of a Levenberg Marquardt optimization
class optimization_iteration_t
{
    public:
        // Zero-indexed iteration number (Information before the first iteration is
        // included at index -1)
        int16_t iteration;

        // Value of lambda at this iteration
        double current_lambda;

        // Error after the iteration, using the linearized cost
        double new_error_linear;

        // Error after the iteration, using the full nonlinear cost function
        double new_error;

        // Relative reduction in error between the initial and updated states for
        // this iteration
        double relative_reduction;

        // Was the update accepted?
        int8_t update_accepted;

        // Angle between previous update and current update
        double update_angle_change;

        // The values, residual, and jacobian are only populated when debug_stats is true,
        // otherwise they are size 0
        // The Values at this step
        ::sym::values_t values;

        // The problem residual
        ::eigen_lcm::VectorXf residual;

        // The problem jacobian exactly if dense, or as CSC format sparse data column vector if sparse
        ::eigen_lcm::MatrixXf jacobian_values;

    public:
        optimization_iteration_t() = default;

        /**
         * Member constructor
         */
        inline optimization_iteration_t(
            const int16_t& iteration_arg,
            const double& current_lambda_arg,
            const double& new_error_linear_arg,
            const double& new_error_arg,
            const double& relative_reduction_arg,
            const int8_t& update_accepted_arg,
            const double& update_angle_change_arg,
            const ::sym::values_t& values_arg,
            const ::eigen_lcm::VectorXf& residual_arg,
            const ::eigen_lcm::MatrixXf& jacobian_values_arg
        );

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline __lcm_buffer_size encode(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline __lcm_buffer_size getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline __lcm_buffer_size decode(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        using type_name_array_t = const char[25];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "optimization_iteration_t"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "sym"
         */
        inline static constexpr const char * getPackageName();

        // LCM support functions. Users should not call these
        inline __lcm_buffer_size _encodeNoHash(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const;
        inline __lcm_buffer_size _getEncodedSizeNoHash() const;
        inline __lcm_buffer_size _decodeNoHash(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen);
#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
        __attribute__((noinline))
#endif
        static uint64_t _computeHash(const __lcm_hash_ptr *p)
        {
            const __lcm_hash_ptr *fp;
            for(fp = p; fp != NULL; fp = fp->parent)
                if(fp->v == optimization_iteration_t::getHash)
                    return 0;
            const __lcm_hash_ptr cp = { p, optimization_iteration_t::getHash };

            uint64_t hash = 0x7bbef34d4523b52cLL +
                ::sym::values_t::_computeHash(&cp) +
         ::eigen_lcm::VectorXf::_computeHash(&cp) +
         ::eigen_lcm::MatrixXf::_computeHash(&cp);

            return (hash<<1) + ((hash>>63)&1);
        }

        // Comparison operators.
        inline bool operator==(const optimization_iteration_t& other) const;
        inline bool operator!=(const optimization_iteration_t& other) const;

        // Ability to print to standard streams as well as the fmt library.
        friend std::ostream& operator<<(std::ostream& stream, const optimization_iteration_t& obj) {
#if defined(SKYMARSHAL_PRINTING_ENABLED)
            stream << "optimization_iteration_t(";
            stream << "iteration=" << obj.iteration << ", ";
            stream << "current_lambda=" << obj.current_lambda << ", ";
            stream << "new_error_linear=" << obj.new_error_linear << ", ";
            stream << "new_error=" << obj.new_error << ", ";
            stream << "relative_reduction=" << obj.relative_reduction << ", ";
            stream << "update_accepted=" << (obj.update_accepted ? "true" : "false") << ", ";
            stream << "update_angle_change=" << obj.update_angle_change << ", ";
            stream << "values=" << obj.values << ", ";
            stream << "residual=" << obj.residual << ", ";
            stream << "jacobian_values=" << obj.jacobian_values;
            stream << ")";
#else
            stream << "<FORMATTING DISABLED>";
#endif
            return stream;
        }
};

optimization_iteration_t::optimization_iteration_t(
    const int16_t& iteration_arg,
    const double& current_lambda_arg,
    const double& new_error_linear_arg,
    const double& new_error_arg,
    const double& relative_reduction_arg,
    const int8_t& update_accepted_arg,
    const double& update_angle_change_arg,
    const ::sym::values_t& values_arg,
    const ::eigen_lcm::VectorXf& residual_arg,
    const ::eigen_lcm::MatrixXf& jacobian_values_arg
) : iteration(iteration_arg),
    current_lambda(current_lambda_arg),
    new_error_linear(new_error_linear_arg),
    new_error(new_error_arg),
    relative_reduction(relative_reduction_arg),
    update_accepted(update_accepted_arg),
    update_angle_change(update_angle_change_arg),
    values(values_arg),
    residual(residual_arg),
    jacobian_values(jacobian_values_arg) {}

__lcm_buffer_size optimization_iteration_t::encode(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const
{
    __lcm_buffer_size pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size optimization_iteration_t::decode(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen)
{
    __lcm_buffer_size pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

__lcm_buffer_size optimization_iteration_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t optimization_iteration_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

constexpr optimization_iteration_t::type_name_array_t* optimization_iteration_t::getTypeNameArrayPtr() {
    return &"optimization_iteration_t";
}

constexpr const char* optimization_iteration_t::getTypeName()
{
    return *optimization_iteration_t::getTypeNameArrayPtr();
}

constexpr const char * optimization_iteration_t::getPackageName()
{
    return "sym";
}

__lcm_buffer_size optimization_iteration_t::_encodeNoHash(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const
{
    __lcm_buffer_size pos = 0, tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->iteration, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->current_lambda, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->new_error_linear, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->new_error, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->relative_reduction, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->update_accepted, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->update_angle_change, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->values._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->residual._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->jacobian_values._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size optimization_iteration_t::_decodeNoHash(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen)
{
    __lcm_buffer_size pos = 0, tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->iteration, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->current_lambda, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->new_error_linear, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->new_error, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->relative_reduction, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->update_accepted, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->update_angle_change, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->values._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->residual._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->jacobian_values._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size optimization_iteration_t::_getEncodedSizeNoHash() const
{
    __lcm_buffer_size enc_size = 0;
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += this->values._getEncodedSizeNoHash();
    enc_size += this->residual._getEncodedSizeNoHash();
    enc_size += this->jacobian_values._getEncodedSizeNoHash();
    return enc_size;
}

bool optimization_iteration_t::operator==(const optimization_iteration_t& other) const {
  return (
          (iteration==other.iteration) && 
          (current_lambda==other.current_lambda) && 
          (new_error_linear==other.new_error_linear) && 
          (new_error==other.new_error) && 
          (relative_reduction==other.relative_reduction) && 
          (update_accepted==other.update_accepted) && 
          (update_angle_change==other.update_angle_change) && 
          (values==other.values) && 
          (residual==other.residual) && 
          (jacobian_values==other.jacobian_values));
}

bool optimization_iteration_t::operator!=(const optimization_iteration_t& other) const {
  return !(*this==other);
}

}

#endif