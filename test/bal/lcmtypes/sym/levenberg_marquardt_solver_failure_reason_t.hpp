/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 *
 * From Source File: /Users/ryan/dev/symforce-zig-build/lcmtypes/symforce.lcm
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __sym_levenberg_marquardt_solver_failure_reason_t_hpp__
#define __sym_levenberg_marquardt_solver_failure_reason_t_hpp__

#include <array>
#include <ostream>

namespace sym
{

class levenberg_marquardt_solver_failure_reason_t
{
    public:
        enum option_t : int32_t {
            INVALID = 0,
            LAMBDA_OUT_OF_BOUNDS = 1,
        };

    public:
        option_t value;

    public:
        levenberg_marquardt_solver_failure_reason_t() = default;

        /**
         * Member constructor
         */
        inline constexpr levenberg_marquardt_solver_failure_reason_t(const option_t& value_arg);

        /**
         * Conversion to int32_t value.
         */
        inline int32_t int_value() const;

        /**
         * Static constructor from int32_t value.  Does not validate the value.
         */
        static inline levenberg_marquardt_solver_failure_reason_t from_int(int32_t int_value);

        /**
         * Get all values of the enum as a std::array.
         */
        static inline constexpr std::array<option_t, 2> values();

        /**
         * Get const-char pointer of the enum string.
         */
        inline const char* string_value() const;

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline __lcm_buffer_size encode(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline __lcm_buffer_size getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline __lcm_buffer_size decode(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        constexpr static int64_t getHash();

        using type_name_array_t = const char[44];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "levenberg_marquardt_solver_failure_reason_t"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "sym"
         */
        inline static constexpr const char * getPackageName();

        // LCM support functions. Users should not call these
        inline __lcm_buffer_size _encodeNoHash(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const;
        inline __lcm_buffer_size _getEncodedSizeNoHash() const;
        inline __lcm_buffer_size _decodeNoHash(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen);
        constexpr static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

constexpr levenberg_marquardt_solver_failure_reason_t::levenberg_marquardt_solver_failure_reason_t(
    const levenberg_marquardt_solver_failure_reason_t::option_t& value_arg
) : value(value_arg) {}

int32_t levenberg_marquardt_solver_failure_reason_t::int_value() const {
    return static_cast<int32_t>(value);
}

levenberg_marquardt_solver_failure_reason_t levenberg_marquardt_solver_failure_reason_t::from_int(int32_t int_value) {
    return levenberg_marquardt_solver_failure_reason_t(static_cast<option_t>(int_value));
}

__lcm_buffer_size levenberg_marquardt_solver_failure_reason_t::encode(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const
{
    __lcm_buffer_size pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size levenberg_marquardt_solver_failure_reason_t::decode(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen)
{
    __lcm_buffer_size pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

__lcm_buffer_size levenberg_marquardt_solver_failure_reason_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

constexpr int64_t levenberg_marquardt_solver_failure_reason_t::getHash()
{
    return _computeHash(NULL);
}

constexpr levenberg_marquardt_solver_failure_reason_t::type_name_array_t* levenberg_marquardt_solver_failure_reason_t::getTypeNameArrayPtr() {
    return &"levenberg_marquardt_solver_failure_reason_t";
}

constexpr const char* levenberg_marquardt_solver_failure_reason_t::getTypeName()
{
    return *levenberg_marquardt_solver_failure_reason_t::getTypeNameArrayPtr();
}

constexpr const char * levenberg_marquardt_solver_failure_reason_t::getPackageName()
{
    return "sym";
}

__lcm_buffer_size levenberg_marquardt_solver_failure_reason_t::_encodeNoHash(void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen) const
{
    __lcm_buffer_size pos = 0, tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, reinterpret_cast<const int32_t*>(&this->value), 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size levenberg_marquardt_solver_failure_reason_t::_decodeNoHash(const void *buf, __lcm_buffer_size offset, __lcm_buffer_size maxlen)
{
    __lcm_buffer_size pos = 0, tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, reinterpret_cast<int32_t*>(&this->value), 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

__lcm_buffer_size levenberg_marquardt_solver_failure_reason_t::_getEncodedSizeNoHash() const
{
    __lcm_buffer_size enc_size = 0;
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    return enc_size;
}

constexpr uint64_t levenberg_marquardt_solver_failure_reason_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0xa6869f09f492d897LL;
    return (hash<<1) + ((hash>>63)&1);
}

inline bool operator==(const levenberg_marquardt_solver_failure_reason_t& a, const levenberg_marquardt_solver_failure_reason_t& b)
{
    return a.value == b.value;
}

inline bool operator!=(const levenberg_marquardt_solver_failure_reason_t& a, const levenberg_marquardt_solver_failure_reason_t& b)
{
    return !(a == b);
}

inline bool operator<(const levenberg_marquardt_solver_failure_reason_t& a, const levenberg_marquardt_solver_failure_reason_t& b)
{
    return a.value < b.value;
}

inline constexpr std::array<levenberg_marquardt_solver_failure_reason_t::option_t, 2> levenberg_marquardt_solver_failure_reason_t::values()
{
    return {{
        INVALID,
        LAMBDA_OUT_OF_BOUNDS,
    }};
}

inline const char* levenberg_marquardt_solver_failure_reason_t::string_value() const
{
    switch (value) {
        case levenberg_marquardt_solver_failure_reason_t::INVALID:
            return "INVALID";
        case levenberg_marquardt_solver_failure_reason_t::LAMBDA_OUT_OF_BOUNDS:
            return "LAMBDA_OUT_OF_BOUNDS";
    }
    return "levenberg_marquardt_solver_failure_reason_t::<UNKNOWN VALUE>";
}

inline std::ostream& operator <<(std::ostream& s, const levenberg_marquardt_solver_failure_reason_t::option_t& option)
{
    switch (option) {
        case levenberg_marquardt_solver_failure_reason_t::INVALID:
            return s << "INVALID";
        case levenberg_marquardt_solver_failure_reason_t::LAMBDA_OUT_OF_BOUNDS:
            return s << "LAMBDA_OUT_OF_BOUNDS";
    }
    return s << "levenberg_marquardt_solver_failure_reason_t::" << static_cast<int32_t>(option);
}

inline std::ostream& operator <<(std::ostream& s, const levenberg_marquardt_solver_failure_reason_t& object)
{
    return s << object.value;
}

}  // namespace  sym

// Allow enum as an unordered_map key
// http://stackoverflow.com/a/18838036
namespace std {
template <>
struct hash<::sym::levenberg_marquardt_solver_failure_reason_t> {
    typedef ::sym::levenberg_marquardt_solver_failure_reason_t argument_type;
    typedef std::underlying_type<argument_type::option_t>::type underlying_type;
    std::size_t operator()(const argument_type& arg) const {
        std::hash<underlying_type> hasher;
        return hasher(static_cast<underlying_type>(arg.value));
    }
};
} // namespace std

#endif